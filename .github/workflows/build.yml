name: Multi-OS, Multi-Compiler Build

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  Cross-Platform-Build:
    runs-on: ${{ matrix.os }}
    name: "Cross-Platform Build"
    
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-latest, macos-latest]
        include:
          - os: ubuntu-22.04
            name: Linux
          - os: windows-latest
            name: Windows
          - os: macos-latest
            name: macOS
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install dependencies (Linux)
      if: matrix.os == 'ubuntu-22.04'
      run: |
        sudo apt-get update
        sudo apt-get install build-essential \
        libsndfile1-dev libassimp-dev libasound2-dev libxrandr-dev \
        libopengl-dev libxinerama-dev libxcursor-dev libxi-dev \
        libgl1-mesa-dev libglu1-mesa-dev libxmu-dev libxi-dev
    
    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install libsndfile

    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Use chocolatey to install VS2017 with proper workloads
        choco install -y visualstudio2017community --package-parameters "--add Microsoft.VisualStudio.Workload.NativeDesktop --add Microsoft.VisualStudio.Component.VC.CLI.Support --add Microsoft.VisualStudio.Component.VC.CMake.Project --includeRecommended"
        
        # Verify installation
        $msbuildPath = "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\MSBuild\15.0\Bin\MSBuild.exe"
        if (Test-Path $msbuildPath) {
          Write-Host "VS2017 Community with MSBuild installed successfully"
        } else {
          Write-Host "VS2017 installation verification failed"
          # List what was actually installed
          Get-ChildItem "C:\Program Files*\Microsoft Visual Studio" -Recurse -Name "MSBuild.exe" 2>$null
          exit 1
        }
      shell: powershell

    - name: Initialize repository
      run: |
        ./init.sh
      shell: bash

    - name: Build examples
      run: |
        # Build each C++ file in src directory
        for cpp_file in src/*.cpp; do
          if [ -f "$cpp_file" ]; then
            echo "Building $cpp_file..."
            ./run.sh -n "$cpp_file"
            if [ $? -ne 0 ]; then
              echo "Failed to build $cpp_file"
              exit 1
            fi
          fi
        done
      shell: bash
    
    - name: List build artifacts
      run: |
        echo "Bin directory contents:"
        ls src/bin
      shell: bash
